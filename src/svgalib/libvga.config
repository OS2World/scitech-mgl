# Configuration file for svgalib. Default location is /etc/vga.
# Other config file locations:  ~/.svgalibrc
#               where SVGALIB_CONFIG_FILE points
# Lines starting with '#' are ignored.

# Have a deep look at README.config to see what can do here (especially
# for mach32).

# Mouse type:

# mouse Microsoft   # Microsoft
# mouse MouseSystems    # Mouse Systems
# mouse MMSeries    # Logitech MM Series
# mouse Logitech    # Logitech protocol (old, newer mice use Microsoft protocol)
# mouse Busmouse    # Bus mouse
# mouse PS2     # PS/2 mouse
# mouse MouseMan    # Logitech MouseMan
# mouse Spaceball   # Spacetec Spaceball
# mouse IntelliMouse    # Microsoft IntelliMouse or Logitech MouseMan+ on serial port
# mouse IMPS2       # Microsoft IntelliMouse or Logitech MouseMan+ on PS/2 port
# mouse none        # None

mouse Microsoft

# Mouse/keyboard customisation by 101 (Attila Lendvai). If you have any good
# ideas you can reach me at 101@kempelen.inf.bme.hu

# mouse_accel_type  normal  # No acceleration while delta is less then
                # threshold but delta is multiplied by
                # mouse_accel_mult if more. Originally done by
                # Mike Chapman mike@paranoia.com

# mouse_accel_type  power   # The acceleration factor is a power function
                # of delta until it reaches m_accel_mult. It
                # starts from the coordinate 
                # [1, 1 + m_accel_offset] and goes to
                # [m_accel_thresh, m_accel_mult]. If delta
                # is bigger then m_accel_thresh it is a plain
                # constant (m_accel_mult). It is the f(delta)
                # function with which the delta itself will be
                # multiplied. m_accel_offset is 1 by default,
                # so for delta = 1 the accelerated delta will
                # remain 1 (You don't lose resolution). The
                # starting point of the f(delta) function
                # might be moved along the Y axis up/down with
                # m_accel_offset thus defining the initial
                # minimum acceleration (for delta = 1).
                # Basically it's like the normal mode but the
                # acceleration factor grows as you move your
                # mouse faster and faster, not just turns in
                # and out. Threshold is the point from where
                # the f(delta) function gets linear.
                # This is the one I use for *uaking... =)

mouse_accel_type    off # No comment...


mouse_accel_mult    60  # This is the number with which delta will
                # be multiplied. Basically it's the number
                # that defines how big the acceleration will
                # be

mouse_accel_thresh  4   # This is the threshold. See description by
                # power

mouse_accel_power   0.8 # This is the second parameter of the power
                # function used in power mode. Used only by
                # the power mode

mouse_accel_offset  30  # This is the offset of the starting point
                # on the Y axis. With this you can define the
                # number that will multiply delta = 1 so it's
                # the initial acceleration.

# mouse_accel_maxdelta  600 # This is an upper limit for delta after
                # the acceleration was applied

# mouse_maxdelta    30  # This is an upper limit for the delta
                # before the acceleration. With this one you
                # can limit the biggest valid delta that
                # comes from the mouse.

# mouse_force           # Force parameters even if they seem strange
                # By default svgalib prints an error if any
                # of the numbers are somhow out of the
                # reasonable limit, (Like a negative mult :)
                # and uses the default that's in vgamouse.h

# Usually /dev/mouse will be a link to the mouse device.
# However, esp. with the Spacetec Spaceball you may
# want to specify a different device for svgalib to use

# mdev /dev/ttyS0 # mouse is at /dev/ttyS0

# Some multiprotocol mice will need one of the following:

# setRTS   # set the RTS wire.
# clearRTS # clear the RTS wire.
# leaveRTS # leave the RTS wire alone (default) (Wire is usually set)
# setDTR   # set the DTR wire.
# clearDTR # clear the DTR wire.
# leaveDTR # leave the DTR wire alone (default) (Wire is usually set)

# mouse_fake_kbd_event sends a fake keyboard event to the program when the
# wheel on a Microsoft IntelliMouse, Logitech MouseMan+, or similar wheel
# mouse is turned. The format is:
#
#   mouse_fake_kbd_event upscancode downscancode
#
# The up and down scancodes are the scancodes of the keys to simulate when
# the wheel is turned up and down, respectively.
#
# The following can be specified for the scancodes: letters (A-Z), numbers
# (0-9), function keys (F1-F12), or any of the following - ESCAPE, MINUS,
# EQUAL, BACKSPACE, TAB, BRACKET_LEFT, BRACKET_RIGHT, ENTER, LEFTCONTROL,
# SEMICOLON, APOSTROPHE, GRAVE, LEFTSHIFT, BACKSLASH, COMMA, PERIOD, SLASH,
# RIGHTSHIFT, KEYPADMULTIPLY, LEFTALT, SPACE, CAPSLOCK, NUMLOCK, SCROLLLOCK,
# KEYPAD7, CURSORUPLEFT, KEYPAD8, CURSORUP, KEYPAD9, CURSORUPRIGHT, KEYPADMINUS,
# KEYPAD4, CURSORLEFT, KEYPAD5, KEYPAD6, CURSORRIGHT, KEYPADPLUS, KEYPAD1,
# CURSORDOWNLEFT, KEYPAD2, CURSORDOWN, KEYPAD3, CURSORDOWNRIGHT, KEYPAD0,
# KEYPADPERIOD, KEYPADCENTER, RIGHTCONTROL, CONTROL, KEYPADDIVIDE,
# PRINTSCREEN, RIGHTALT, BREAK, BREAK_ALTERNATIVE, HOME, CURSORBLOCKUP,
# PAGEUP, CURSORBLOCKLEFT, CURSORBLOCKRIGHT, END, CURSORBLOCKDOWN, PAGEDOWN,
# INSERT
#
# Note that this option has no effect unless the IntelliMouse or IMPS2 mouse
# type is used (see above). Also note that the simulated keypresses are
# instantaneous, so they cannot be used for functions that require a key to
# be held down for a certain length of time.

# This example simulates a press of the left bracket ([) when the wheel is
# turned up and a press of the right bracket (]) when the wheel is turned
# down (good for selecting items in Quake II):
#mouse_fake_kbd_event BRACKET_LEFT BRACKET_RIGHT

# Keyboard config:

# kbd_fake_mouse_event, as it says, sends a fake mouse event to the program.
# The format is: kbd_fake_mouse_event scancode [flag(s)] command [argument]
#   Scancode is a raw scancode. You can find them in src/keyboard/vgakeyboard.h.
#   Flags:   down   - trigger event when the key is pressed (default)
#        up     - the opposite
#        both   - trigger in both case, if pressed/released
#        repeat - repeat events if the key is kept pressed (off by default)
#   commands: delta[xyz]  - send a fake delta event as if you have moved your
#               mouse. If the parameter is 'off' / 'on' it will turn
#               off/on the respective mouse axis (requires a
#               parameter, of course)
#         button[123] - send a fake event that the mouse button is pressed
#               or released that's given by the parameter.
#               ('pressed' or 'released')
# Here are some examples:

#  This is one I use in *uake: it turns around, looks down a bit and when the
#  key is released it does the opposite, so it gets back to the starting state.
#  With this one and the help of a rocket you can fly though the whole map :)
#  (Scancode 28 is enter)
# kbd_fake_mouse_event 28 both deltax 8182 down deltay -1500 up deltay 1500

#  This one will switch off the y axis of the mouse while the key (right ctrl)
#  is kept pressed.
# kbd_fake_mouse_event 97 down deltay off  up deltay on

#  This one is the same as if you were pressing the left mouse button. (But
#  if you move your mouse then the button state will reset even if you keep
#  right ctrl down...)
# kbd_fake_mouse_event 97 down button1 pressed up button1 released
